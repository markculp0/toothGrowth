q()
install.packages("xlsx")
install.packages("XML")
install.packages("jsonlite")
install.packages("data.table")
install.packages("RMySQL")
source("http://bioconductor.org/biocLite.R")
biocLite("rhdf5")
library("rhdf5")
install.packages("httr")
install.packages("plyr")
install.packages("Hmisc")
install.packages("dplyr")
install.packages("tidyr")
install.packages("stringr")
install.packages("lubridate")
install.packages("readr")
q()
ls
ls()
getwd()
setwd("code/r")
getwd()
dir()
setwd("artOfR/")
dir()
setwd("..")
dir()
rnorm(5)
?rnorm
norm(5,5)
rnorm(5,5)
?sd
sd()
sd
sd(9)
Nile
n <- Nile
n
mean(n)
sd(n)
min(n)
max(n)
x <- c(5,6,4,3,7)
sd(x)
mean(x)
5 + 4.5
q()
rm(n,x)
args(lapply)
x <- c(1,2,3)
typeof(x)
str(x)
attrib(x)
class(x)
x <- c(x,4)
length(x)
typeof(x)
x <- x * 2
x
xf <- factor(x)
xf
xf[2]
z <- as.numeric(levels(xf)[xf])
levels(xf)[xf][3]
cat <- c("m","w","n","m")
tapply(x,cat,mean)
rm(list = ls())
q()
install.packages(c("BH", "colorspace", "curl", "ggplot2", "hms", "knitr", "Rcpp", "scales", "XML", "yaml"))
rm(n,x)
sqlite3
rm(n,x)
q()
Sys.getenv("path")
system('g++ -v')
system('where make')
cat("\nCXXFLAGS=-O3 -mtune=native -march=native -Wno-unused-variable -Wno-unused-function",
file = M, sep = "\n", append = TRUE)
cat('Sys.setenv(BINPREF = "C:/Rtools/mingw_$(WIN)/bin/")',
file = file.path(Sys.getenv("HOME"), ".Rprofile"),
sep = "\n", append = TRUE)
cat(readLines(M), sep = "\n")
cat("\nCXXFLAGS += -Wno-ignored-attributes -Wno-deprecated-declarations",
file = M, sep = "\n", append = TRUE)
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies=TRUE)
q()
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
' )
fx( 2L, 5 ) # should be 10
library('rstan')
rm(fx,n,x)
install.packages(c("coda","mvtnorm","devtools"))
library(devtools)
devtools::install_github("rmcelreath/rethinking")
q()
swirl
install.packages("swirl")
swirl()
library(swirl)
swirl()
install_course("Exploratory Data Analysis")
install_course("Getting and Cleaning Data")
0
.q
exit
nxt()
ls
swirl()
q()
BiocInstaller::biocLite("RColorBrewer")
q()
?dbinom
dbinom(6,9,0.5)
library(rstan)
library(rethinking)
rethink_cmyk
ls
3!
factorial(3)
f(3)
choose(9,6)
?choose
exit
q()
p_grid <- seq( from=0, to=1, length.out = 20 )
prior <- rep(1, 20)
likelihood <- dbinom(6, size = 9, prob = p_grid)
rm(likelihood)
options(scipen = 999)
likelihood <- dbinom(6, size = 9, prob = p_grid)
likelihood
unstd.posterior <- likelihood * prior
posterior <- unstd.posterior / sum(unstd.posterior)
plot( p_grid, posterior , type = 'b', xlab = "probability of water", ylab = "posterior probability")
p_grid <- seq( from=0, to=1, length.out = 20 )
prior <- rep(1, 20)
likelihood <- dbinom(6, size = 9, prob = p_grid)
unstd.posterior <- likelihood * prior
posterior <- unstd.posterior / sum(unstd.posterior)
samples <- sample( p_grid, prob = posterior, size = 1e4, replace = T )
posterior
plot(samples)
library(rethinking)
dens(samples)
q()
demo(package = "tidyr")
demo(dadmom)
demo(package = "tidyr", dadmom)
View(dadmom)
vignette("tidyr")
vignette("tidy-data")
q()
library(swirl)
swirl()
install_course("Statistical Inference")
swirl()
q()
library(swirl)
swirl()
33/36
deck
52
4/52
0
12/52
2/51
.64
0.64
mypdf
integrate(mypdf, 0, 1.6)
2
1.4
info()
skip()
q()
library(swirl)
swirl()
0.997*.001
0.015*0.999
0.000997/(0.000997+0.014985)
3.5
expect_dice()
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
(edh+edl)*.5
integrate(myfunc, 0, 2)
spop
mean(spop)
allsam
apply(allsam, 1,mean)
mean(smeans)
q()
?qunif
qunif(c(0.25,0.5,0.75,1.0),0,1)
x <- 1:4
p <- x/sum(x)
temp <- rbind(x,p)
rownames(temp) <- c("X","Prob")
View(temp)
q()
library(swirl)
swirl()
dice_sqr
ex2_fair <- sum(dice_sqr * dice_fair)
ex2_fair - (3.5^2)
sum(dice_sqr * dice_high) - (edh^2)
sum(dice_high * dice_sqr)-edh^2
sd(apply(matrix(rnorm(10000),1000),1,mean))
1/sqrt(10)
1/sqrt(120)
sd(apply(matrix(runif(10000),1000),1,mean))
2/sqrt(10)
sd(apply(matrix(rpois(10000,4),1000),1,mean))
1/(2*sqrt(1))
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
q()
library(swirl)
swirl()
choose(5,3) * .328
choose(5,5) * .32768 + choose(5,4) * .08192 + choose(5,3) * .32768
choose(5,5) * (.8)^5(.2)^(5-5) + choose(5,4) * (.8)^4*(.2)(5-4) + choose(5,3) * (.8)^3*(.2)^(5-3)
choose(5,5) * (.8)^5(.2)^(5-5) + choose(5,4) * (.8)^4*(.2)(5-4) + choose(5,3) * (.8)^3 * (.2)^(5-3)
choose(5,5) * (.8)^5(.2)^(5-5)
choose(5,5) * (.8)^5 + choose(5,4) * (.8)^4*(.2)(5-4) + choose(5,3) * (.8)^3 * (.2)^(5-3)
choose(5,5) * (.8)^5
choose(5,5) * (.8)^5 + choose(5,4) * (.8)^4 * .2
choose(5,5) * (.8)^5 + choose(5,4) * (.8)^4 * .2 + choose(5,3) * (.8)^3 * 0.64
choose(5,5) * (.8)^5 + choose(5,4) * (.8)^4 * .2 + choose(5,3) * (.8)^3 * (.2)^2
pbinom(2, 5, .8, lower.tail = FALSE)
qnorm(0.10)
0
qnorm(97.5, 3, 2)
qnorm(.975, 3, 2)
3 + 1.96*2
pnorm(1200, 1020,50, lower.tail = FALSE)
pnorm(3.6, lower.tail = FALSE)
pnorm((1200-1020)/50 lower.tail = FALSE)
pnorm((1200-1020)/50, lower.tail = FALSE)
qnorm(0.75, 1020, 50, lower.tail = TRUE)
.53
.53
ppois(3, (2.5 * 4))
ppois(3, 2.5 * 4)
pbinom(5, 1000, 0.01)
ppois(5, 1000 * 0.01)
q()
library(swirl)
swirl()
coinPlot(10)
coinPlot(10000)
qnorm(90)
qnorm(.95)
.6 +c(-1,1)*sqrt((.6*.4)/100)
.6 +c(-1,1)*qnorm(.975)*sqrt(.6*.4/100)
binom.test(60,100)$conf.int
mywald(.2)
ACCompar(20)
lamb <- 5/94.32
lamb + c(-1,1)*qnorm(.975)*sqrt(lamb/t)
lamb + c(-1,1)*qnorm(.975)*sqrt(lamb/94.32)
poisson.test(5,94.32)$conf
q()
qnorm(0.95)
?qnorm
qnorm(0.95, 1100, 75)
choose(5,4)*.5^8 + choose(5,5)*.5^8
choose(5,4)*.5^5 + choose(5,5)*.5^5
ppois(10,15)
?sample
1/sqrt(100)
qnorm(0.95, 1100, 110)
qnorm(0.95, 1100, .10)
qnorm(0.95, 1100, 7.5)
setwd("~/code/r/coursera/20170312_statInference/toothGrowth")
