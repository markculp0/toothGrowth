ls
ls()
getwd()
setwd("code/r")
getwd()
dir()
setwd("artOfR/")
dir()
setwd("..")
dir()
rnorm(5)
?rnorm
norm(5,5)
rnorm(5,5)
?sd
sd()
sd
sd(9)
Nile
n <- Nile
n
mean(n)
sd(n)
min(n)
max(n)
x <- c(5,6,4,3,7)
sd(x)
mean(x)
5 + 4.5
q()
rm(n,x)
args(lapply)
x <- c(1,2,3)
typeof(x)
str(x)
attrib(x)
class(x)
x <- c(x,4)
length(x)
typeof(x)
x <- x * 2
x
xf <- factor(x)
xf
xf[2]
z <- as.numeric(levels(xf)[xf])
levels(xf)[xf][3]
cat <- c("m","w","n","m")
tapply(x,cat,mean)
rm(list = ls())
q()
install.packages(c("BH", "colorspace", "curl", "ggplot2", "hms", "knitr", "Rcpp", "scales", "XML", "yaml"))
rm(n,x)
sqlite3
rm(n,x)
q()
Sys.getenv("path")
system('g++ -v')
system('where make')
cat("\nCXXFLAGS=-O3 -mtune=native -march=native -Wno-unused-variable -Wno-unused-function",
file = M, sep = "\n", append = TRUE)
cat('Sys.setenv(BINPREF = "C:/Rtools/mingw_$(WIN)/bin/")',
file = file.path(Sys.getenv("HOME"), ".Rprofile"),
sep = "\n", append = TRUE)
cat(readLines(M), sep = "\n")
cat("\nCXXFLAGS += -Wno-ignored-attributes -Wno-deprecated-declarations",
file = M, sep = "\n", append = TRUE)
install.packages("rstan", repos = "https://cloud.r-project.org/", dependencies=TRUE)
q()
fx <- inline::cxxfunction( signature(x = "integer", y = "numeric" ) , '
return ScalarReal( INTEGER(x)[0] * REAL(y)[0] ) ;
' )
fx( 2L, 5 ) # should be 10
library('rstan')
rm(fx,n,x)
install.packages(c("coda","mvtnorm","devtools"))
library(devtools)
devtools::install_github("rmcelreath/rethinking")
q()
swirl
install.packages("swirl")
swirl()
library(swirl)
swirl()
install_course("Exploratory Data Analysis")
install_course("Getting and Cleaning Data")
0
.q
exit
nxt()
ls
swirl()
q()
BiocInstaller::biocLite("RColorBrewer")
q()
?dbinom
dbinom(6,9,0.5)
library(rstan)
library(rethinking)
rethink_cmyk
ls
3!
factorial(3)
f(3)
choose(9,6)
?choose
exit
q()
p_grid <- seq( from=0, to=1, length.out = 20 )
prior <- rep(1, 20)
likelihood <- dbinom(6, size = 9, prob = p_grid)
rm(likelihood)
options(scipen = 999)
likelihood <- dbinom(6, size = 9, prob = p_grid)
likelihood
unstd.posterior <- likelihood * prior
posterior <- unstd.posterior / sum(unstd.posterior)
plot( p_grid, posterior , type = 'b', xlab = "probability of water", ylab = "posterior probability")
p_grid <- seq( from=0, to=1, length.out = 20 )
prior <- rep(1, 20)
likelihood <- dbinom(6, size = 9, prob = p_grid)
unstd.posterior <- likelihood * prior
posterior <- unstd.posterior / sum(unstd.posterior)
samples <- sample( p_grid, prob = posterior, size = 1e4, replace = T )
posterior
plot(samples)
library(rethinking)
dens(samples)
q()
demo(package = "tidyr")
demo(dadmom)
demo(package = "tidyr", dadmom)
View(dadmom)
vignette("tidyr")
vignette("tidy-data")
q()
library(swirl)
swirl()
install_course("Statistical Inference")
swirl()
q()
library(swirl)
swirl()
33/36
deck
52
4/52
0
12/52
2/51
.64
0.64
mypdf
integrate(mypdf, 0, 1.6)
2
1.4
info()
skip()
q()
library(swirl)
swirl()
0.997*.001
0.015*0.999
0.000997/(0.000997+0.014985)
3.5
expect_dice()
expect_dice
dice_high
expect_dice(dice_high)
expect_dice(dice_low)
(edh+edl)*.5
integrate(myfunc, 0, 2)
spop
mean(spop)
allsam
apply(allsam, 1,mean)
mean(smeans)
q()
?qunif
qunif(c(0.25,0.5,0.75,1.0),0,1)
x <- 1:4
p <- x/sum(x)
temp <- rbind(x,p)
rownames(temp) <- c("X","Prob")
View(temp)
q()
library(swirl)
swirl()
dice_sqr
ex2_fair <- sum(dice_sqr * dice_fair)
ex2_fair - (3.5^2)
sum(dice_sqr * dice_high) - (edh^2)
sum(dice_high * dice_sqr)-edh^2
sd(apply(matrix(rnorm(10000),1000),1,mean))
1/sqrt(10)
1/sqrt(120)
sd(apply(matrix(runif(10000),1000),1,mean))
2/sqrt(10)
sd(apply(matrix(rpois(10000,4),1000),1,mean))
1/(2*sqrt(1))
1/(2*sqrt(10))
sd(apply(matrix(sample(0:1,10000,TRUE),1000),1,mean))
q()
library(swirl)
swirl()
choose(5,3) * .328
choose(5,5) * .32768 + choose(5,4) * .08192 + choose(5,3) * .32768
choose(5,5) * (.8)^5(.2)^(5-5) + choose(5,4) * (.8)^4*(.2)(5-4) + choose(5,3) * (.8)^3*(.2)^(5-3)
choose(5,5) * (.8)^5(.2)^(5-5) + choose(5,4) * (.8)^4*(.2)(5-4) + choose(5,3) * (.8)^3 * (.2)^(5-3)
choose(5,5) * (.8)^5(.2)^(5-5)
choose(5,5) * (.8)^5 + choose(5,4) * (.8)^4*(.2)(5-4) + choose(5,3) * (.8)^3 * (.2)^(5-3)
choose(5,5) * (.8)^5
choose(5,5) * (.8)^5 + choose(5,4) * (.8)^4 * .2
choose(5,5) * (.8)^5 + choose(5,4) * (.8)^4 * .2 + choose(5,3) * (.8)^3 * 0.64
choose(5,5) * (.8)^5 + choose(5,4) * (.8)^4 * .2 + choose(5,3) * (.8)^3 * (.2)^2
pbinom(2, 5, .8, lower.tail = FALSE)
qnorm(0.10)
0
qnorm(97.5, 3, 2)
qnorm(.975, 3, 2)
3 + 1.96*2
pnorm(1200, 1020,50, lower.tail = FALSE)
pnorm(3.6, lower.tail = FALSE)
pnorm((1200-1020)/50 lower.tail = FALSE)
pnorm((1200-1020)/50, lower.tail = FALSE)
qnorm(0.75, 1020, 50, lower.tail = TRUE)
.53
.53
ppois(3, (2.5 * 4))
ppois(3, 2.5 * 4)
pbinom(5, 1000, 0.01)
ppois(5, 1000 * 0.01)
q()
library(swirl)
swirl()
coinPlot(10)
coinPlot(10000)
qnorm(90)
qnorm(.95)
.6 +c(-1,1)*sqrt((.6*.4)/100)
.6 +c(-1,1)*qnorm(.975)*sqrt(.6*.4/100)
binom.test(60,100)$conf.int
mywald(.2)
ACCompar(20)
lamb <- 5/94.32
lamb + c(-1,1)*qnorm(.975)*sqrt(lamb/t)
lamb + c(-1,1)*qnorm(.975)*sqrt(lamb/94.32)
poisson.test(5,94.32)$conf
q()
q()
library(swirl)
swirl()
myplot(2)
myplot(20)
myplot2(2)
qt(.975,2)
myplot2(20)
sleep
range(g1)
range(g2)
difference <- g2 - g1
mean(difference)
s <- sd(difference)
mn + c(-1,1) * qt(.975,19) * s/sqrt(20)
mn + c(-1,1) * qt(.975,9) * s/sqrt(10)
t.test(g2 - g1)$conf.int
t.test(difference)$conf.int
sp <- sqrt((7*15.34^2 + 20*18.23^2)/(8+21-2))
sp <- 7*15.34^2 + 20*18.23^2
ns <- 27
sp/ns
sp <- sqrt(sp/ns)
mn + c(-1,1) * qt(.975,ns) * sp
132.86-127.44 + c(-1,1) * qt(.975,ns) * sp * sqrt(1/8 + 1/21)
sp <- sqrt(9*sd(g1)^2 + 9*sd(g2)^2/18)
sp <- sqrt((9*var(g1) + 9*var(g2))/18)
sp * sqrt(1/10 + 1/10)
md + c(-1,1)*qt(.975,18)*sp*sqrt(1/5)
t.test(g2,g1,paired = FALSE)$conf
t.test(g2,g1,paired = FALSE,var.equal = TRUE)$conf
t.test(g2,g1,paired = TRUE)$conf
num <- (15.34^2/8 + 18.23^2/21)
num <- (15.34^2/8 + 18.23^2/21)^2
den <- (15.34^2/8)^2 /7 + (18.23^2/21)^2 / 20
mdf <- num/den
mydf <- num/den
qt(.975,mydf)
132.86-127.44 +c(-1,1)*qt(.975,mydf)*sqrt(15.34^2/8 + 18.23^2/21)
q()
library(swirl)
swirl()
1
2
2/(10/4)
15
qt(.95,15)
dim(fs)
t.test(father.son$sheight - father.son$fheight)
t.test(fs$sheight - fs$fheight)
11.7885 * sd(fs$sheight-fs$fheight)/sqrt(1078)
mybin
6
7
8
pt(2.5,15,lower.tail = FALSE)
qnorm(95,lower.tail = FALSE)
qnorm(95)
qnorm(.95)
qnorm(.99)
pnorm(2)
pnorm(2, lower.tail = FALSE)
mybin
pbinom(6,8,.5,lower.tail = FALSE)
pbinom(7,8,.5,lower.tail = TRUE)
ppois(9,5,lower.tail = FALSE)
q()
qt(.975,8)
1100 + c(-1,1) * qt(.975) * 10
1100 + c(-1,1) * qt(.975,8) * 10
2.3 / 2
t.test(3 - 5)
t.test(-2)
t.test(3,5,paired = F, var.equal = F)
-2 + c(-1,1) * qt(.975,18) * .3578
4 + c(-1,1) * qnorm(.975) * .5
6 + c(-1,1) * qnorm(.975) * 20
-4 + c(-1,1) * qt(.95,16) * .781
.2064*qnorm(.975)
q()
dim(ToothGrowth)
str(ToothGrowth)
head(ToothGrowth)
range(ToothGrowth$len)
unique(sort(ToothGrowth$supp))
str(ToothGrowth)
unique(sort(ToothGrowth$dose))
dim(ToothGrowth)
?ToothGrowth
unique(sort(ToothGrowth$supp))
table(length(ToothGrowth$dose), ToothGrowth$dose)
table(sum(ToothGrowth$dose), ToothGrowth$dose)
?table
table(ToothGrowth$dose)
table(ToothGrowth$supp)
q()
library(swirl)
swirl()
myplot(34)
myplot(33.3)
myplot(30)
myplot(28)
z <- qnorm(.95)
pnorm(30+z, 30, 1, lower.tail = FALSE)
pnorm(30+z, 32, 1, lower.tail = FALSE)
pnorm(30+z, 32, 1, lower.tail = FALSE)
pnorm(30+z*2, 32, 1, lower.tail = FALSE)
pnorm(30+z*2, 32, 2, lower.tail = FALSE)
power.t.test(n = 16, delta = 2 / 4, sd=1, type = "one.sample", alt= "one.sided")$power
power.t.test(n = 16, delta = 2, sd=4, type = "one.sample", alt= "one.sided")$power
power.t.test(n = 16, delta = 100, sd=200, type = "one.sample", alt= "one.sided")$power
power.t.test(power = .8, delta = 2 / 4, sd=1, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 2, sd=4, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 100, sd=200, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, delta = 26, sd=1, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, n = 26, sd=1, type = "one.sample", alt = "one.sided")$n
power.t.test(power = .8, n = 26, sd=1, type = "one.sample", alt = "one.sided")$delta
power.t.test(power = .8, n = 27, sd=1, type = "one.sample", alt = "one.sided")$delta
head(pValues)
pValues[< .05]
pValues < .05
sum(pValues < .05)
sum(p.adjust(pValues, method="bonferroni"))
sum(p.adjust(pValues, method="bonferroni") < 0.05)
sum(p.adjust(pValues, method="BH") < 0.05)
tail(trueStatus)
table(pValues2<.05, trueStatus)
.048
table(p.adjust(pValues2, method = "bonferroni") <.05, trueStatus)
table(p.adjust(pValues2, method = "BH") <.05, trueStatus)
1*1/6 + 2*1/6 + 3*1/6+4*1/6+5*1/6+6*1/6
print(g2)
head(sh)
nh
median(resampledMedians)
median(sh)
sam <- sample(fh, nh*B, replace = TRUE)
resam <- matrix(sam, B, nh)
meds <- apply(resam,1,median)
median(fh) - median(meds)
sd(meds)
sd(resampledMedians)
quantile(resampledMedians,c(0.025,0.975))
quantile(meds,c(0.025,0.975))
dim(InsectSprays)
names(InsectSprays)
range(Bdata$count)
range(Cdata$count)
BCounts
BCcounts
group
testStat
obs <- testStat(BCcounts, group)
obs
mean(Cdata$count) - mean(Bdata$count)
mean(Bdata$count) - mean(Cdata$count)
sample(group)
perms <- sapply(1 : 10000, function(i) testStat(BCcounts, sample(group)))
mean(perms > obs)
testStat(DEcounts,group)
perms <- sapply(1 : 10000, function(i) testStat(DEcounts, sample(group)))
q()
dir()
q()
setwd("~/code/r/coursera/20170312_statInference/toothGrowth")
library(datasets)
data("ToothGrowth")
options(scipen = 999)
dim(ToothGrowth)
str(ToothGrowth)
range(ToothGrowth$len)
table(ToothGrowth$supp)
table(ToothGrowth$dose, ToothGrowth$supp)
oj <- ToothGrowth[ToothGrowth$supp == "OJ",]
oj05 <- oj[oj$dose == 0.5,]
oj10 <- oj[oj$dose == 1.0,]
oj20 <- oj[oj$dose == 2.0,]
boxplot(len ~ dose, data = oj,
boxwex = 0.25, at = 1:3 - 0.2,
col = "yellow",
main = "Guinea Pigs' Tooth Growth",
xlab = "Orange juice dosage in milligrams",
ylab = "tooth length",
xlim = c(0.5, 3.5), ylim = c(0, 35), yaxs = "i")
vc <- ToothGrowth[ToothGrowth$supp == "VC",]
vc05 <- vc[vc$dose == 0.5,]
vc10 <- vc[vc$dose == 1.0,]
vc20 <- vc[vc$dose == 2.0,]
boxplot(len ~ dose, data = vc,
boxwex = 0.25, at = 1:3 - 0.2,
col = "yellow",
main = "Guinea Pigs' Tooth Growth",
xlab = "Ascorbic Acid dosage in milligrams",
ylab = "tooth length",
xlim = c(0.5, 3.5), ylim = c(0, 35), yaxs = "i")
mnsOJ <- rbind(
c("0.5",mean(oj05$len),round(sd(oj05$len),3),round(var(oj05$len),3)),
c("1.0",mean(oj10$len),round(sd(oj10$len),3),round(var(oj10$len),3)),
c("2.0",mean(oj20$len),round(sd(oj20$len),3),round(var(oj20$len),3))
)
mnsOJ
mnsVC <- rbind(
c("0.5",mean(vc05$len),round(sd(vc05$len),3),round(var(vc05$len),3)),
c("1.0",mean(vc10$len),round(sd(vc10$len),3),round(var(vc10$len),3)),
c("2.0",mean(vc20$len),round(sd(vc20$len),3),round(var(vc20$len),3))
)
mnsVC
t.test(oj05$len)[4]
t.test(oj05$len)[1]
t.test(oj05$len)[c(1:3)]
t.test(oj05$len)$p.value
5 + c(-1,1) * qnorm(0.975) * (sdMns/sqrt(1000))
set.seed(0)
n <- 40
lambda <- 0.2
expSample = NULL
mnsExpDist = NULL
varExpDist = NULL
for (i in 1 : 1000) {
expSample = rexp(n, lambda)
mnsExpDist = c(mnsExpDist, mean(expSample))
varExpDist = c(varExpDist, var(expSample))
}
hist(mnsExpDist)
expDistMean <- round(mean(expDist),3)
sdMns <- sd(mnsExpDist)
5 + c(-1,1) * qnorm(0.975) * (sdMns/sqrt(1000))
sum(mnsExpDist[mnsExpDist > 4.95127, ])
sum(mnsExpDist[mnsExpDist > 4.95127])
sum(mnsExpDist > 4.95127)
sum(mnsExpDist > 4.95127 & mnsExpDist < 5.04873)
5 + c(-1,1) * qnorm(0.975) * sdMns
sum(mnsExpDist > 3.459017 & mnsExpDist < 6.540983)
sdMns
5 + c(-1,1) * qnorm(0.975) * sqrt(25)
5 + c(-1,1) * qnorm(0.975) * (sqrt(25)/100)
5 + c(-1,1) * qnorm(0.975) * (sqrt(25)/sqrt(1000)
5 + c(-1,1) * qnorm(0.975) * (sqrt(25)/sqrt(1000)
sum(mnsExpDist > 3.459017 & mnsExpDist < 6.540983)
5 + c(-1,1) * qnorm(0.975) * (sqrt(25)/sqrt(1000))
5 + c(-1,1) * qnorm(0.975) * (sqrt(25))
5 + c(-1,1) * qnorm(0.975)
t.test(mnsExpDist)
5 + c(-1,1) * qnorm(0.975) * sdMns
5 + c(-1,1) * qnorm(0.975) * sdMns/sqrt(1000)
sum(mnsExpDist > 4.95 & mnsExpDist < 5.048)
5 + (2*sdMns)
5 + (2*5)
5 - (2*5)
mean(mnsExpDist)
poisson.test(5,5)$conf
t.test(mnsExpDist)
5 + sdMns*2
sdMns
t.test(mnsExpDist)
5 + c(-1,1) * qnorm(0.975)
5 + c(-1,1) * qnorm(0.975) * sdMns
sum(mnsExpDist > 3.45 & mnsExpDist < 6.54)
sdMns
mnsDistMean + c(-1,1) * qnorm(0.975) * sdMns
mnsDistMean <- round(mean(mnsExpDist),3)
mnsDistMean + c(-1,1) * qnorm(0.975) * sdMns
q()
